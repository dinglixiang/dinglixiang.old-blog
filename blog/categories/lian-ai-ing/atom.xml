<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 恋爱ing | Dinglixiang]]></title>
  <link href="http://dinglixiang.github.io/blog/categories/lian-ai-ing/atom.xml" rel="self"/>
  <link href="http://dinglixiang.github.io/"/>
  <updated>2013-04-27T15:21:23+08:00</updated>
  <id>http://dinglixiang.github.io/</id>
  <author>
    <name><![CDATA[Dinglixiang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[恋爱ing之返回顶部、底部]]></title>
    <link href="http://dinglixiang.github.io/blog/2013/04/27/lian-ai-ingzhi-fan-hui-ding-bu-%2C-di-bu/"/>
    <updated>2013-04-27T15:10:00+08:00</updated>
    <id>http://dinglixiang.github.io/blog/2013/04/27/lian-ai-ingzhi-fan-hui-ding-bu-,-di-bu</id>
    <content type="html"><![CDATA[<blockquote><p>项目github地址：<a href="https://github.com/dinglixiang/Shopping">恋爱ing </a></p>

<p>bootstrap地址：<a href="http://xiemin.me/bootstrap-2.3.0/">Bootstrap</a></p></blockquote>

<p>当页面信息过多时，为方便信息的浏览，人性化操作，特加入返回顶部、底部功能。</p>

<p>通过网上搜索，找到如下方法。
以<a href="https://github.com/dinglixiang/Shopping/blob/master/web/FlowerDetails.jsp">FlowerDetails.jsp</a>为例。</p>

<p><strong>1.在<code>&lt;head&gt;&lt;/head&gt;</code>标签中加入如下js脚本，并引入<a href="https://github.com/dinglixiang/Shopping/tree/master/web">js文件</a>：</strong></p>

<pre><code>&lt;script type="text/javascript" src="jquery-1.4.1.js"&gt;&lt;/script&gt;
&lt;style type="text/css"&gt;
    .go{width:47px;height:65px;position:fixed;_position:absolute;_top:expression(eval(document.documentElement.scrollTop+document.documentElement.clientHeight-this.offsetHeight-(parseInt(this.currentStyle.marginTop,10)||200)-(parseInt(this.currentStyle.marginBottom,10)||0)));right:20px;bottom:30%; background-color: lightgoldenrodyellow; background-repeat:no-repeat;}
    .go a{text-indent:999em;width:37px;margin:5px;border:0;overflow:hidden;float:left; cursor:pointer;}
    .go .top{background-position:0 0px;height:22px;background-image: url(./images/a.jpg);}
    .go .feedback{background-position:0 -22px;height:32px}
    .go .bottom{background-position:0 -55px;height:22px;background-image: url(./images/a.jpg);}
    .go .top:hover{background-position:-38px -0px}
    .go .feedback:hover{background-position:-38px -22px }
    .go .bottom:hover{background-position:-38px -55px}
    &lt;/style&gt;
    &lt;script type="text/javascript"&gt;
        $(function () {

            $(".top").click(//定义返回顶部点击向上滚动的动画
            function () {
                $('html,body').animate({ scrollTop: 0 }, 700);
            });
            $(".bottom").click(//定义返回顶部点击向上滚动的动画
            function () {
                $('html,body').animate({ scrollTop: document.body.clientHeight }, 700);

            });

        })
&lt;/script&gt;
</code></pre>

<p><strong>2.在<code>&lt;/body&gt;</code>标签之前加入如下代码：</strong></p>

<pre><code>&lt;div class="go"&gt;
  &lt;a title="返回顶部" class="top"&gt;&lt;/a&gt;
  &lt;a title="返回底部" class="bottom" &gt;&lt;/a&gt;
&lt;/div&gt;
</code></pre>

<p>最后，页面信息过多时，即可查看效果。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[恋爱ing之商品搜索]]></title>
    <link href="http://dinglixiang.github.io/blog/2013/04/27/lian-ai-ingzhi-shang-pin-sou-suo/"/>
    <updated>2013-04-27T15:01:00+08:00</updated>
    <id>http://dinglixiang.github.io/blog/2013/04/27/lian-ai-ingzhi-shang-pin-sou-suo</id>
    <content type="html"><![CDATA[<blockquote><p>项目github地址：<a href="https://github.com/dinglixiang/Shopping">恋爱ing </a></p>

<p>bootstrap地址：<a href="http://xiemin.me/bootstrap-2.3.0/">Bootstrap</a></p></blockquote>

<p><strong><em>Before：界面引入bootstrap。</em></strong></p>

<p>本项目的搜索仅限于模糊搜索。</p>

<p><strong>1.搜索样式表单：</strong></p>

<p>◆<a href="https://github.com/dinglixiang/Shopping/blob/master/web/flowers.jsp">flowers.jsp</a></p>

<pre><code>&lt;form class="navbar-search pull-search" action="SearchResult.jsp"&gt;                                              
 &lt;input type="text" class="search-query" name="condition"&gt;
 &lt;button type="submit" class="btn" &gt;搜索&lt;/button&gt;
&lt;/form&gt;
</code></pre>

<p><strong>2.处理表单数据</strong>
◆<a href="https://github.com/dinglixiang/Shopping/blob/master/web/SearchResult.jsp">SearchResult.jsp</a>，通过javaBean调用<a href="https://github.com/dinglixiang/Shopping/blob/master/src/java/pack/FlowerBean.java">SearchResult方法</a>,调用方法请参考前几篇blog。</p>

<pre><code>//接受搜索条件参数
String condition=request.getParameter("condition");
//通过javaBean调用搜索方法
ArrayList flowers=flower.SearchResult(condition);
//循环输出结果
Iterator iter=flowers.iterator();
......此处省略
</code></pre>

<p>◆调用pack.FlowerBean.java中
<a href="https://github.com/dinglixiang/Shopping/blob/master/src/java/pack/FlowerBean.java">SearchResult方法</a></p>

<pre><code>//模糊查询的sql语句
String strsql="select * from products where product_name like "+"'%"+condition+"%'";
</code></pre>

<p>OK，我就实现了这么一点模糊查询的功能了。后续可能会添加更加强大点的搜索~~~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[恋爱ing之购买数量的加减]]></title>
    <link href="http://dinglixiang.github.io/blog/2013/04/27/lian-ai-ingzhi-gou-mai-shu-liang-de-jia-jian/"/>
    <updated>2013-04-27T14:52:00+08:00</updated>
    <id>http://dinglixiang.github.io/blog/2013/04/27/lian-ai-ingzhi-gou-mai-shu-liang-de-jia-jian</id>
    <content type="html"><![CDATA[<blockquote><p>项目github地址：<a href="https://github.com/dinglixiang/Shopping">恋爱ing </a></p>

<p>bootstrap地址：<a href="http://xiemin.me/bootstrap-2.3.0/">Bootstrap</a></p></blockquote>

<p><strong><em>Before：界面引入bootstrap。</em></strong></p>

<p>通过js实现购买产品的数量的加减</p>

<p>◆<a href="https://github.com/dinglixiang/Shopping/blob/master/web/flowers.jsp">flowers.jsp</a></p>

<p>jsp加减样式：</p>

<pre><code>&lt;input type="button" class="btn" value="-" onclick="minus(&lt;%=p.getId()%&gt;)"&gt;
&lt;input type="text" class="span1"  value="1" id="&lt;%=p.getId() %&gt;"&gt;
&lt;input type="button"  class="btn" value="+" onclick="plus(&lt;%=p.getId()%&gt;)"&gt;   
</code></pre>

<p>其中<code>p.getId()</code>是在页面展示产品时，循环产品的ArrayList获取的产品的<code>id</code>.</p>

<p>在点击<code>-</code>、<code>+</code>的按钮时，调用<code>minus</code>和<code>plus</code>的方法，且此方法将产品的<code>id</code>作为参数传递。</p>

<pre><code>&lt;script type="text/javascript"&gt;
function minus(id)
{
var count = document.getElementById(id).value;         
document.getElementById(id).value = count-1;
}
&lt;/script&gt;

&lt;script type="text/javascript"&gt;
function plus(id)
{
var number=document.getElementById(id).value;                                      
var cont=parseInt(number)+1;
document.getElementById(id).value = cont;
}
&lt;/script&gt;
</code></pre>

<p>在此简单说下为什么要用产品的id作为text的id，即此句。</p>

<p><code>&lt;input type="text" class="span1"  value="1" id="&lt;%=p.getId() %&gt;"&gt;</code></p>

<p>  其实最开始，我实现数量的加减的时候，id是一个字符串，是不变的，在调用js的方法时，通过计算加减1，但是显示的位置是不对的，总是在第一个产品的数量text框中。后来发现，我在循环输出产品信息的时候，每个产品都有一个数量的text框，而且他们的id名称都是相同的，通过 <code>document.getElementById(id).value = cont;</code>改变文本框value值的时候，也就只能改变第一个产品的数量text文本框中的值。所以，后来就采用了一个动态的<code>id</code>作为传递的值。</p>

<p>  OK，至此，数量的加减操作已经完成了，可以将此值传递到下一个页面进行商品总价的计算了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[恋爱ing之购买商品销量增加]]></title>
    <link href="http://dinglixiang.github.io/blog/2013/04/27/lian-ai-ingzhi-gou-mai-shang-pin-xiao-liang-zeng-jia/"/>
    <updated>2013-04-27T14:43:00+08:00</updated>
    <id>http://dinglixiang.github.io/blog/2013/04/27/lian-ai-ingzhi-gou-mai-shang-pin-xiao-liang-zeng-jia</id>
    <content type="html"><![CDATA[<blockquote><p>项目github地址：<a href="https://github.com/dinglixiang/Shopping">恋爱ing </a></p>

<p>bootstrap地址：<a href="http://xiemin.me/bootstrap-2.3.0/">Bootstrap</a></p></blockquote>

<p><strong><em>Before：界面引入bootstrap。</em></strong></p>

<p>购买商品，不可避免的有销量这么一说。</p>

<p>◆本项目中在点击商品加入购物车的同时，我也通过<code>session</code>将所购买的商品的数量存放起来。</p>

<p>◆<a href="https://github.com/dinglixiang/Shopping/blob/master/web/MyCar.jsp">MyCar.jsp</a></p>

<pre><code>//加入小车时传递的参数
int id=Integer.parseInt(request.getParameter("id"));
String count=request.getParameter("count");
//设置session，以为可能购买商品的种类不是单一的，所以通过 "count"+id 来区分哪种商品所购买的数量
session.setAttribute("count"+id,count);
</code></pre>

<p><strong>1.在购物车页面，也要通过数量计算商品的总价。</strong></p>

<p>首先定义一个总价的变量：</p>

<pre><code>float totalprice=0;
</code></pre>

<p>此处有循环输出，具体参考 Cart.jsp文件。</p>

<pre><code>//获取到购物车中商品的购买数量
String count=(String)session.getAttribute("count"+(p.getId()));                                
int cnt=Integer.parseInt(count);
</code></pre>

<p>在循环每个购物车的session时，计算总价：</p>

<pre><code>totalprice+=cnt*(p.getPrice()); 
</code></pre>

<p>最后在循环之外将总价显示出来。</p>

<p><strong>2.购买完成之后，商品的销量要增加。</strong></p>

<p>在订单信息页面（<a href="https://github.com/dinglixiang/Shopping/blob/master/web/OrderInfo.jsp">OrderInfo.jsp</a>）,循环过程中更新商品的销量。</p>

<pre><code>//获取属于该商品的购买数量
String count=(String)session.getAttribute("count"+(p.getId()));
int cnt=Integer.parseInt(count);
//更新数据库中的销量信息
product.UpdateSalesById(p.getId(),p.getSales(),cnt);
</code></pre>

<p>同之前调用FindProductById一样，此时调用的<a href="https://github.com/dinglixiang/Shopping/blob/master/src/java/pack/FlowerBean.java">UpdateSalesById方法</a>也是通过JavaBean调用。</p>

<p>至此，商品销量的更新完成了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[恋爱ing之jsp页面跳转及传参]]></title>
    <link href="http://dinglixiang.github.io/blog/2013/04/27/lian-ai-ingzhi-jspye-mian-tiao-zhuan-ji-chuan-can/"/>
    <updated>2013-04-27T14:24:00+08:00</updated>
    <id>http://dinglixiang.github.io/blog/2013/04/27/lian-ai-ingzhi-jspye-mian-tiao-zhuan-ji-chuan-can</id>
    <content type="html"><![CDATA[<blockquote><p>项目github地址：<a href="https://github.com/dinglixiang/Shopping">恋爱ing </a></p>

<p>bootstrap地址：<a href="http://xiemin.me/bootstrap-2.3.0/">Bootstrap</a></p></blockquote>

<p><strong><em>Before：界面引入bootstrap。</em></strong></p>

<p><strong>1.首先说下jsp页面跳转的一个小技巧</strong></p>

<p><code>&lt;a target=main onclick ="javascript:history.go(-1);"&gt;返回继续&lt;/a&gt;</code></p>

<p>返回到之前浏览的页面。</p>

<p><strong>2.其次说下本项目jsp页面中最常使用的页面跳转及传参方法</strong></p>

<p>以<a href="https://github.com/dinglixiang/Shopping/blob/master/web/flowers.jsp">flowers.jsp</a>中的加入小车为例</p>

<pre><code>&lt;input class="btn btn-info" value="加入小车" type="button" onclick="{window.location.href='MyCar.jsp?id=&lt;%=p.getId()%&gt;&amp;count='+document.getElementById(&lt;%=p.getId()%&gt;).value;}"&gt;
</code></pre>

<p>通过<code>onlick</code>事件传递参数，内容格式为：<code>onclick="{window.location.href='跳转页面.jsp'}"</code></p>

<p>需要传参的话，格式为：</p>

<p><code>window.location.href='跳转页面.jsp?参数名1=（要传递的参数）&amp;参数名2=（要传递的参数)'</code></p>

<p>在跳转的页面中可通过如下方式获取传递过来的参数：</p>

<pre><code>request.getParameter("参数名1")；
request.getParameter("参数名2")；
</code></pre>

<p>具体代码可参考<a href="https://github.com/dinglixiang/Shopping/blob/master/web/MyCar.jsp">MyCar.jsp</a>。</p>

<p><strong>3jsp 页面跳转的几种方法</strong></p>

<p>跳转的方法网上一搜，到处都是的，但是还是要记录在我的开发过程中。</p>

<p><em>(1). RequestDispatcher.forward()</em></p>

<p>　　在服务器端起作用,当使用forward()时,Servlet engine传递HTTP请求从当前的Servlet或者是JSP到另外的一个Servlet、JSP 或普通HTML文件,也即你的form提交至a.jsp,在a.jsp用到了forward()重定向至b.jsp,此时form提交的所有信息在 b.jsp都可以获得,参数自动传递.</p>

<p>  但forward()无法重定向至有frame的jsp文件,可以重定向至有frame的html文件,同时forward()无法在后面带参数传递,比如servlet?name=frank,这样不行,可以程序内通过response.setAttribute("name",name)来传至下一个页面。</p>

<p>重定向后浏览器地址栏URL不变。</p>

<p>　　例：在servlet中进行重定向</p>

<pre><code>public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException,IOException{
response.setContentType("text/html; charset=gb2312");
ServletContext sc = getServletContext();
RequestDispatcher rd = null;
rd = sc.getRequestDispatcher("/index.jsp"); //定向的页面
rd.forward(request, response);
}
</code></pre>

<p>通常在servlet中使用，不在jsp中使用。</p>

<p><em>(2). response.sendRedirect()</em></p>

<p>  是在用户的浏览器端工作,sendRedirect()可以带参数传递,比如servlet?name=frank传至下个页面,同时它可以重定向至不同的主机上,sendRedirect()可以重定向有frame.的jsp文件.</p>

<p>重定向后在浏览器地址栏上会出现重定向页面的URL</p>

<p><em>ps:这也是本项目中用到最多的页面跳转方法</em>。</p>

<p><em>(3). ＜jsp:forward page="" /＞</em></p>

<p>  它的底层部分是由RequestDispatcher来实现的，因此它带有RequestDispatcher.forward()方法的印记。</p>

<p>如果在之前有很多输出,前面的输出已使缓冲区满,将自动输出到客户端,那么该语句将不起作用,这一点应该特别注意。</p>

<p><em>(4). 修改HTTP header的Location属性来重定向</em></p>

<p>  通过设置直接修改地址栏来实现页面的重定向。jsp文件代码如下：</p>

<pre><code>response.setStatus(HttpServletResponse.SC_MOVED_PERMANENTLY);
String newLocn = "/newpath/jsa.jsp";
response.setHeader("Location",newLocn);
</code></pre>

<p><em>(5). JSP中实现在某页面停留若干秒后,自动重定向到另一页面</em></p>

<p>　　在html文件中，下面的代码：</p>

<p>　　<code>＜meta http-equiv="refresh" content="300; url=target.jsp"＞</code></p>

<p>　　它的含义：在5分钟之后正在浏览的页面将会自动变为target.html这一页。代码中300为刷新的延迟时间，以秒为单位。targer.html为你想转向的目标页,若为本页则为自动刷新本页。</p>

<p>　　由上可知，可以通过setHeader来实现某页面停留若干秒后,自动重定向到另一页面。代码：</p>

<pre><code>String content=stayTime+";URL="+URL;
response.setHeader("REFRESH",content);
</code></pre>

<p>另外要注意：它不能改变浏览器地址，刷新的话会导致重复提交.</p>

<p>ps:<em>本项目的注册等页面(<a href="https://github.com/dinglixiang/Shopping/blob/master/web/RegisterUser.jsp">RegisterUser.jsp</a>)有一点点使用。</em></p>
]]></content>
  </entry>
  
</feed>
